#!/usr/bin/env bash

#
# echo is also return in bash functions lol
#

set -euo pipefail

LOG_LEVEL=`echo $LOG_LEVEL | tr A-Z a-z`
test $LOG_LEVEL == "debug" && set -x

# Configuration
PORT=8080
WWWROOT=htdocs
RUNDIR=run

# HTTP Response Helpers
respond() {
    local status="$1"
    local content_type="${2:-text/plain}"
    local content="$3"
    local content_length=$(($(echo -n "$content" | wc -c)+1))
    echo -e "HTTP/1.1 $status\r\nContent-Type: $content_type\r\nContent-Length: $content_length\r\n\r\n$content"
}

parse_headers() {
    declare -g -A HEADERS
    local prev_header=""
    
    while read -r line; do
        # Break at empty line (end of headers)
        test -z "$line" && break
        
        # Handle header continuations (lines starting with whitespace)
        if [[ $line =~ ^[[:space:]] ]]; then
            # Append to previous header if exists
            if [[ -n "$prev_header" ]]; then
                HEADERS[$prev_header]+=" ${line## }"
            fi
            continue
        fi
        
        # Parse normal headers
        if [[ $line =~ ^([^:]+):\ (.*)$ ]]; then
            local name="${BASH_REMATCH[1],,}"  # lowercase header name
            local value="${BASH_REMATCH[2]}"
            HEADERS[$name]="$value"
            prev_header="$name"
        fi
    done
}

handle_request() {
    local line="$1"
    if [[ $line =~ ^(GET|POST|PUT|DELETE|PATCH)\ /(.*)\ HTTP.*$ ]]; then
        declare -g METHOD=${BASH_REMATCH[1]}
        declare -g REQUEST_PATH=$WWWROOT/${BASH_REMATCH[2]}
        parse_headers

        case $METHOD in
            GET)
                if test -f $REQUEST_PATH; then
                    respond "200 OK" "$(file -b --mime-type $REQUEST_PATH)" "$(cat $REQUEST_PATH)"
                else
                    respond "404 Not Found" "" "404 Not Found"
                fi
                ;;
            POST)
                local content_length=${HEADERS[content-length]:-0}
                local post_data=""
                test $content_length -gt 0 && read -n $content_length post_data
                
                while IFS= read -r line; do 
                    # free persistent sessions!
                    export "$line"
                done <<< "$post_data"
                
                if test -x "$REQUEST_PATH"; then
                    respond "200 OK" "" "$($REQUEST_PATH)"
                else
                    respond "404 Not Found" "" "Script not found or not executable" 
                fi
                ;;
            PUT)
                content_length=${HEADERS[content-length]:-0}
                
                if test $content_length -gt 0; then
                    dd bs=$content_length count=1 of="$REQUEST_PATH"
                    respond "201 Created" "" "File created"
                else
                    respond "411 Length Required" "" "Content-Length required"
                fi
                ;;
            PATCH)
                local content_length=${HEADERS[content-length]:-0}
                local patch_data=""
                
                if ! test -f "$REQUEST_PATH"; then
                    respond "404 Not Found" "" "Target file not found"
                    return
                fi
                
                if test $content_length -gt 0; then
                    read -n $content_length patch_data
                    if echo "$patch_data" | patch "$REQUEST_PATH" -; then
                        respond "200 OK" "" "Patch applied"
                    else
                        respond "400 Bad Request" "" "Patch failed to apply"
                    fi
                else
                    respond "411 Length Required" "" "Content-Length required"
                fi
                ;;
            DELETE)
                if test -f "$REQUEST_PATH"; then
                    if rm "$REQUEST_PATH"; then
                        respond "200 OK" "" "File deleted"
                    else
                        respond "500 Server Error" "" "Could not delete $REQUEST_PATH"
                    fi
                else
                    respond "404 Not Found" "" "404 Not Found"
                fi
                ;;
            *)
                respond "501 Not Implemented" "" "Method not implemented"
                ;;
        esac
    fi
}

REQ=$RUNDIR/rx RES=$RUNDIR/tx
mkfifo $REQ $RES

cleanup() {
    rm -f $REQ $RES
    kill %2 2>/dev/null
    set +x
    exit
}

trap cleanup EXIT SIGINT

# Prime the nc_in pipe first
echo >$REQ &

while true; do
    read line <$RES
    # first request is always bogus due to te pipe priming
    [[ $line =~ ^(GET|POST|PUT|DELETE|PATCH)\ /.*\ HTTP.*$ ]] || continue
    handle_request "$line" >$REQ
done &

nc -lk $PORT <$REQ >$RES
